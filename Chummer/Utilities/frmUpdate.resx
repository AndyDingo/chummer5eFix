<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Cf/eiwD/vYUe/wAAABYAAAAAAAAAAAAAABa3gRn/9LxW//K2Tf/zwWf/9NCJ//TNgP/1y3v//8dy/3rd
        kP8A8qz/AO2k/wHrov8B6Z//Aeid/wHmm/8A5Zv/AOad/6u7V//0qTf/5qc1/+GlMP/eoSr/3J4j/9qa
        Hf/dlRT/w5gZ/wDYif/Fghn/AAAAFgAAAAAAAAAAAAAAFraBGf/zwmP/77lQ//bVlP/21ZP/9tOO//fR
        iP//z4H/p9qQ/wDzsf8D7ab/AOui/wHpn/8B6J3/Aeab/wDkmv8A5Jn/Dd6Q/6O7Vv/vqDT/5KYx/9+j
        LP/cnyX/3Joe/+SVEf9jtUz/AOGc/8qAFv8AAAAWAAAAAAAAAAAAAAAVtoEX//XHb//vvVf/+N2p//fa
        n//42Jn/+NeV///UkP//0IX/H/Ky/xHuq/8H7KX/AOmg/wDonf8A55z/AOWa/wDjmP8A45n/PNJ9/6q3
        UP/npjL/36Qu/92gJ//emyD/6ZQR/yPIbP8E4p//yn8U/wAAABUAAAAAAAAAAAAAABC2gRf/9Mt6//PG
        bf/54bT/+d2p//rdpf/63KH//9ud///WlP8a9Lv/IO+y/xftqv8I6qP/AOmg/xrhk/8x24z/AOSZ/wDk
        mv8S3Iv/0LBD/+enM//gpS//3aEo/+CcIP/vkg//ANWF/0LYlf/IgBX/AAAAEAAAAAAAAAAAAAAACa17
        F8Xlv3L/9MZp//rlvv/64bT/++Gu//3grP//4Kn//92h/yv2v/8v8Lf/Ju6w/xfrqv8T6KH//7lV/zva
        if8V35D/Vs95//KuQf/wqzr/5Kk1/+ClMP/goCj/5poc/66kLv8A2Yv/e8eC/7l6FcUAAAAJAAAAAAAA
        AAAAAAACo3QXfNCjSv/3ynP/+ujC//vmvv/75Lf//uS0///jsf//4az/W/LA/z7zu/8y77X/Jeyv/xHs
        q/9d243/T9mG/wDnnf//r0P/n79d/++rO//lqTf/4qUv/+agJ//inB//Jchu/wzhoP+0okn/qnQWfAAA
        AAIAAAAAAAAAAAAAAAAAAAANuoUd//jWlf/63qj/++rI//7nv//26L3/vO/F/53xxP9R98j/SfTB/zvy
        vP8u77b/Muut/yDop/8k45z/istx/wDjmP9G0Hn/9qo3/+eoNP/ooy3/85wf/w7RfP8A247/XOSx/8qC
        Gf8AAAANAAAAAAAAAAAAAAAAAAAAAAAAAASuexax2a9e//vfpv/979P//uvI//fpw//L7cb/ZPrT/173
        zf9d9Mf/xuGn/1rstf+A4qP/LOqs/8DMev9M24//AOae/3PHav+avFf/8qQw/+WjLf9rvFf/OcRk/2fX
        kP+vsF7/tnsWsQAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAm1fhL/8dGR//3pwf/97tL//+rH///m
        v//Y7MT/hvXN/8nmtv//2qD//9WW///Oh/8/67P/HO2y/w/qrP8d453/q71c/4q/Wv/KrD3/AteH/wDd
        j/97x3T/mtOa/8F/E/8AAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaByFlC+iSL/+uCr///y
        2f//7dH/6e7O/4z63P/P7cT//9+u//7cp//62Z7//dKS/+rRjP9Z5av/f9qT/+e/Zv//qTj/z64//1HG
        af8A2If/GOSk/3/pvv/BiiT/pXMXTwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7B8
        FpzBkCz//OCr/+L44v+v/un/mfzj/6L31///4rb//t6s//nbo//61Zr/+8+N///Kgf//xHX/8rlZ/17I
        av8A4ZX/AN6P/yzpr/+l47L/0Ysm/7J7F4kAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAA7F9FpvCjir/9s+T/+3y1P/J/u3/oPzl/5342v/m5bz//dyq//nYov//0pT//86L//+4
        W/9ayGj/AOKT/yDnqf9n9M7/vdKZ/8qHH/+zexeIAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAah3F0y4fQ//pb10/3f61P+S/+v/mf7o/4784f90+db/SvTI/1jm
        pv9z1Yj/ddOD/zHxvv9p9tL/iPDM/6+3bf/BfhH/rHgXTAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAS5fRSsxYIX/6KuXf+U157/gvjT/3X/
        4/93/+P/d//i/3b/5P+F9dP/mtOc/7GqWP/Hgxf/un4VrAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACtXwVc7t9
        Er7AfQ//wXwN/8J8Df/CfA7/wXwO/8F+EP+8fRO+tnwWcwAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///B////wP/4AEB/4AAAP4AAAB8AAAAOAAAADAAAAAwAAAAIAA
        AACAAAABAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADgAAAB4AA
        AAfAAAAPwAAAD+AAAB/wAAA/+AAAf/4AAf//gAf/
</value>
  </data>
</root>